{"name":"Scrawl.gem","tagline":"Turn hash-likes into simple key=value logging statements","body":"  - [![Quality](http://img.shields.io/codeclimate/github/krainboltgreene/scrawl.gem.svg?style=flat-square)(https://codeclimate.com/github/krainboltgreene/scrawl.gem)\r\n  - [![Coverage](http://img.shields.io/codeclimate/coverage/github/krainboltgreene/scrawl.gem.svg?style=flat-square)](https://codeclimate.com/github/krainboltgreene/scrawl.gem)\r\n  - [![Build](http://img.shields.io/travis-ci/krainboltgreene/scrawl.gem.svg?style=flat-square)](https://travis-ci.org/krainboltgreene/scrawl.gem)\r\n  - [![Dependencies](http://img.shields.io/gemnasium/krainboltgreene/scrawl.gem.svg?style=flat-square)](https://gemnasium.com/krainboltgreene/scrawl.gem)\r\n  - [![Downloads](http://img.shields.io/gem/dtv/scrawl.svg?style=flat-square)](https://rubygems.org/gems/scrawl)\r\n  - [![Tags](http://img.shields.io/github/tag/krainboltgreene/scrawl.gem.svg?style=flat-square)](http://github.com/krainboltgreene/scrawl.gem/tags)\r\n  - [![Releases](http://img.shields.io/github/release/krainboltgreene/scrawl.gem.svg?style=flat-square)](http://github.com/krainboltgreene/scrawl.gem/releases)\r\n  - [![Issues](http://img.shields.io/github/issues/krainboltgreene/scrawl.gem.svg?style=flat-square)](http://github.com/krainboltgreene/scrawl.gem/issues)\r\n  - [![License](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n  - [![Version](http://img.shields.io/gem/v/scrawl.svg?style=flat-square)](https://rubygems.org/gems/scrawl)\r\n\r\nThis is a simple object that turns hashes, even nested, into Heroku like log strings.\r\n\r\nIt is a smaller, faster, and I believe more OO way to do [scrolls](https://github.com/asenchi/scrolls).\r\n\r\n\r\nUsing\r\n=====\r\n\r\nThe `Scrawl` object gives you a simple interface:\r\n\r\n``` ruby\r\nrequire \"scrawl\"\r\n\r\ndata = Scrawl.new(app: \"scrawl\", state: 0)\r\ndata.inspect\r\n  # => \"app=\\\"scrawl\\\" state=0\"\r\nputs data.inspect\r\n  # => app=\"scrawl\" state=0\r\n```\r\n\r\nIt also does some nice things:\r\n\r\n``` ruby\r\nrequire \"scrawl\"\r\n\r\ndata = Scrawl.new(now: -> { Time.now })\r\nputs data.inspect\r\n  # => now=\"2014-04-13 01:36:18 -0500\"\r\nputs data.inspect\r\n  # => now=\"2014-04-13 01:36:19 -0500\"\r\nputs data.inspect\r\n  # => now=\"2014-04-13 01:36:20 -0500\"\r\n```\r\n\r\nYou can also handle a \"global\" set of values:\r\n\r\n``` ruby\r\nrequire \"logger\"\r\nrequire \"scrawl\"\r\n\r\nlogger = Logger.new(STDOUT)\r\nglobal = Scrawl.new(now: -> { Time.now }, app: \"scrawl\", state: 0)\r\n\r\n# ...\r\n\r\ndef report_user(user)\r\n  user.report!\r\n  logger.info(global.merge(message: \"Bank has been reported.\"))\r\n    # => now=\"2014-04-13 01:36:20 -0500\" app=\"scrawl\" state=0 message=\"Bank has been reported.\"\r\nend\r\n\r\n# ...\r\n```\r\n\r\nWe've also got a way to combine multiple statement objects:\r\n\r\n``` ruby\r\nrequire \"logger\"\r\nrequire \"scrawl\"\r\n\r\nlogger = Logger.new(STDOUT)\r\n\r\nglobal = Scrawl.new(now: -> { Time.now })\r\napplication = Scrawl.new(app: \"scrawl\", version: ENV[\"VERSION\"])\r\n\r\nlogger.info(Scrawl.new(global, application, message: \"Hello, World\"))\r\n```\r\n\r\nFinall, nesting:\r\n\r\n``` ruby\r\nrequire \"scrawl\"\r\n\r\nglobal = Scrawl.new(now: -> { Time.now })\r\napplication = Scrawl.new(app: { name: \"scrawl\", version: ENV[\"VERSION\"] })\r\n\r\n# ...\r\n\r\ndef report_user(user)\r\n  begin\r\n    user.report!\r\n  rescue => exception\r\n  logger.info(global.merge(global, application, error: { exception: exception, message: \"Bank wasnt been reported.\" }))\r\n    # => now=\"2014-04-13 01:36:20 -0500\" app.name=\"scrawl\" app.version=0 error.exception=... error.message=\"Bank has been reported.\"\r\n  end\r\nend\r\n\r\n# ...\r\n```\r\n\r\n\r\nInstalling\r\n==========\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"scrawl\", \"~> 3.0\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself with:\r\n\r\n    $ gem install scrawl\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Read the [Code of Conduct](/CONDUCT.md)\r\n  2. Fork it\r\n  3. Create your feature branch (`git checkout -b my-new-feature`)\r\n  4. Commit your changes (`git commit -am 'Add some feature'`)\r\n  5. Push to the branch (`git push origin my-new-feature`)\r\n  6. Create new Pull Request\r\n\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2014-2015 Kurtis Rainbolt-Greene\r\n\r\nMIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-18715035-1","note":"Don't delete this file! It's used internally to help with page regeneration."}